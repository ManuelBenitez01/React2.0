/*
 * üóÑÔ∏è CONFIGURACI√ìN DE BASE DE DATOS (database.js)
 * 
 * Este archivo maneja la conexi√≥n a MySQL usando un pool de conexiones
 * para optimizar el rendimiento y manejo concurrente de peticiones.
 */

require('dotenv').config();           // Carga variables de entorno
const mysql = require('mysql2/promise'); // Cliente MySQL con soporte para Promises

// ================================
// üîß CONFIGURACI√ìN DEL POOL DE CONEXIONES
// ================================

/*
 * Pool de conexiones: En lugar de crear una nueva conexi√≥n para cada consulta,
 * mantiene un pool (conjunto) de conexiones reutilizables.
 * 
 * Ventajas:
 * - Mejor rendimiento (evita crear/cerrar conexiones constantemente)
 * - Manejo autom√°tico de conexiones
 * - L√≠mite de conexiones simult√°neas
 */
const pool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost',        // Servidor de BD (por defecto localhost)
  user: process.env.DB_USER || 'root',             // Usuario de BD (por defecto root)
  password: process.env.DB_PASSWORD || '',         // Contrase√±a de BD (por defecto vac√≠a)
  database: process.env.DB_NAME || 'test',         // Nombre de la base de datos
  port: process.env.DB_PORT || 3306,               // Puerto de MySQL (por defecto 3306)
  
  // Configuraci√≥n del pool
  waitForConnections: true,    // Espera si no hay conexiones disponibles
  connectionLimit: 10,         // M√°ximo 10 conexiones simult√°neas
  queueLimit: 0               // Sin l√≠mite en la cola de espera
});

// ================================
// üß™ FUNCI√ìN DE PRUEBA DE CONEXI√ìN
// ================================

/**
 * Funci√≥n para verificar que la conexi√≥n a la base de datos funciona
 * Se ejecuta al iniciar el servidor para asegurar conectividad
 */
const testConnection = async () => {
  try {
    // Obtiene una conexi√≥n del pool
    const connection = await pool.getConnection();
    console.log('‚úÖ Conexi√≥n a MySQL establecida correctamente');
    
    // IMPORTANTE: Libera la conexi√≥n de vuelta al pool
    connection.release();
    
  } catch (error) {
    // Si hay error, muestra mensaje descriptivo
    console.error('‚ùå Error conectando a MySQL:', error.message);
    throw error; // Re-lanza el error para que el servidor lo maneje
  }
};

// ================================
// üì§ EXPORTACI√ìN DE M√ìDULOS
// ================================

module.exports = {
  pool,           // Pool de conexiones para usar en los modelos
  testConnection  // Funci√≥n de prueba para usar en index.js
};

/*
 * üí° NOTAS IMPORTANTES:
 * 
 * 1. Variables de entorno (.env):
 *    DB_HOST=localhost
 *    DB_USER=root
 *    DB_PASSWORD=tu_contrase√±a
 *    DB_NAME=nombre_de_tu_bd
 *    DB_PORT=3306
 * 
 * 2. El pool se encarga autom√°ticamente de:
 *    - Crear conexiones cuando se necesitan
 *    - Reutilizar conexiones existentes
 *    - Cerrar conexiones inactivas
 *    - Manejar reconexi√≥n en caso de error
 * 
 * 3. Siempre usar connection.release() despu√©s de usar una conexi√≥n
 *    o mejor a√∫n, usar pool.execute() directamente
 */
